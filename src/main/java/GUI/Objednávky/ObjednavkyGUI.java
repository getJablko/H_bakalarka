/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Objednávky;

import GUI.GUIManager;
import GUI.Login.LoginGUI;
import Tabulky.BObjednavka;
import Tabulky.BPolozkaObjednavky;
import Tabulky.BPolozkaObjednavkyPK;
import Tabulky.BPorucha;

import javax.persistence.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * @author Mario
 */
public class ObjednavkyGUI extends javax.swing.JFrame {

    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("default");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    EntityTransaction transaction = entityManager.getTransaction();

    private GUIManager guiManager;
    private LoginGUI loginGUI;


    /**
     * Creates new form ObjednavkyGUI
     */
    public ObjednavkyGUI(GUIManager guiManager, LoginGUI loginGUI) {
        initComponents2();
        this.guiManager = guiManager;
        this.loginGUI = loginGUI;
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // vynulovanie textovych policok
                vynulovaniePolicok();
                guiManager.zviditelniHlavneMenu();
            }
        });
        displayDataInTable();
        naplnComboBoxCisloND();
        naplnComboBoxCisloObj();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    private void initComponents2() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonHome = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxCisloND = new javax.swing.JComboBox<>();
        jComboBoxCisloObj = new javax.swing.JComboBox<>();
        jTextFieldMnozstvo = new javax.swing.JTextField();
        jTextFieldCena = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldDatumObj = new javax.swing.JTextField();
        jTextFieldDatumDoruc = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButtonInsert = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1110, 700));

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("OBJEDNÁVKY");

        //jButtonHome.setBackground(new java.awt.Color(255, 255, 254));
        //jButtonHome.setText("H");

        // Resize the image
        ImageIcon icon = new ImageIcon("C:\\Users\\Mario\\Desktop\\bakalarka\\hibernate_bakalarka\\H_bakalarka\\icons\\home_button2.png");

        // Resize the image
        Image image = icon.getImage(); // transform it
        Image newImg = image.getScaledInstance(25, 25, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
        icon = new ImageIcon(newImg);  // transform it back
        // Create a Color object with RGB values
        Color backgroundColor = new Color(255, 204, 153);
        // Set the background color of the button
        jButtonHome.setBackground(backgroundColor);
        // Set the icon on the JButton
        jButtonHome.setIcon(icon);
        jButtonHome.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            protected void paintButtonPressed(Graphics g, AbstractButton b) {
                // Do nothing to disable the default button pressed painting
            }
        });

        // Set the focus painted property to false
        jButtonHome.setFocusPainted(false);

        // Remove borders from the button
        jButtonHome.setBorder(null);
        jButtonHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHomeActionPerformed(evt);
            }
        });

        jLabel2.setText("číslo ND*:");

        jLabel3.setText("číslo objednávky*:");

        jComboBoxCisloND.setBackground(new java.awt.Color(255, 255, 254));
        //jComboBoxCisloND.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxCisloObj.setBackground(new java.awt.Color(255, 255, 254));
        //jComboBoxCisloObj.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextFieldMnozstvo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTextFieldCena.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel4.setText("množstvo*:");

        jLabel5.setText("cena*:");

        jLabel6.setText("dátum objednania*:");

        jLabel7.setText("dátum doručenia:");

        jTextFieldDatumObj.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTextFieldDatumDoruc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jButtonUpdate.setBackground(new java.awt.Color(255, 255, 254));
        jButtonUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.setPreferredSize(new java.awt.Dimension(87, 25));
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 254));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("NOVÁ OBJEDNÁVKA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovaObjednavkaActionPerformed(evt);
            }
        });

        jButtonInsert.setBackground(new java.awt.Color(255, 255, 254));
        jButtonInsert.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonInsert.setText("INSERT");
        jButtonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertActionPerformed(evt);
            }
        });

        jCheckBox1.setBackground(new java.awt.Color(255, 204, 153));
        jCheckBox1.setFont(new java.awt.Font("Segoe UI", 0, 9)); // NOI18N
        jCheckBox1.setText("Len doručené objednávky");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel6)
                                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel4)
                                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                .addComponent(jButtonInsert, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jButtonUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(jTextFieldDatumObj, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                                                        .addComponent(jTextFieldCena, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jTextFieldMnozstvo, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jTextFieldDatumDoruc)
                                                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.LEADING)))
                                                        .addComponent(jLabel2)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel3)
                                                                .addGap(28, 28, 28)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jComboBoxCisloND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jComboBoxCisloObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButtonHome, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(110, 110, 110)
                                                .addComponent(jLabel1)))
                                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonHome, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel1)
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jComboBoxCisloND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jComboBoxCisloObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextFieldMnozstvo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jTextFieldCena, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(jTextFieldDatumObj, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(jTextFieldDatumDoruc, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jCheckBox1))
                                .addContainerGap(175, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "číslo náhradného dielu", "číslo objednávky", "množstvo", "cena", "dátum objednávky", "dátum doručenia"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClick_ActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>

    private void closeApplication() {
        // cleanup code:
        entityManager.close();
        entityManagerFactory.close();
    }

    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // nacitam ju znova
        displayDataInTable();

        // vynulovanie textovych policok
        this.vynulovaniePolicok();
    }

    private void refreshTableActual() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // vynulovanie textovych policok
        this.vynulovaniePolicok();
    }

    private void naplnComboBoxCisloND() {
        TypedQuery<BigInteger> query;
        List<BigInteger> idcka;

        query = entityManager.createQuery("SELECT n.cisloNd FROM BNahradnyDiel n", BigInteger.class);
        idcka = query.getResultList();

        try {
            // Begin a transaction
            transaction.begin();

            // Vytvorte model pre JComboBox
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            comboBoxModel.addElement(" ");
            for (BigInteger results : idcka) {
                comboBoxModel.addElement(results.toString());
            }

            // Nastavte model do JComboBox
            jComboBoxCisloND.setModel(comboBoxModel);

            // Commit the transaction
            transaction.commit();
        } catch (Exception e) {
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní ID strojov: " + e.getMessage() + " skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
    }

    private void naplnComboBoxCisloObj() {
        TypedQuery<BigInteger> query;
        List<BigInteger> idcka;

        query = entityManager.createQuery("SELECT o.cisloObjednavky FROM BObjednavka o", BigInteger.class);
        idcka = query.getResultList();

        try {
            // Begin a transaction
            transaction.begin();

            // Vytvorte model pre JComboBox
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            comboBoxModel.addElement(" ");
            for (BigInteger results : idcka) {
                comboBoxModel.addElement(results.toString());
            }

            // Nastavte model do JComboBox
            jComboBoxCisloObj.setModel(comboBoxModel);

            // Commit the transaction
            transaction.commit();
        } catch (Exception e) {
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní ID strojov: " + e.getMessage() + " skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
    }

    private void displayDataInTable() {
        try {
            transaction.begin();

            // Retrieve data from the database using JPQL with a join
            TypedQuery<Object[]> query = entityManager.createQuery(
                    "SELECT p.cisloObjednavky, p.cisloNd, p.mnozstvo, p.cena, o.datumObjednavky, o.datumDorucenia " +
                            "FROM BPolozkaObjednavky p " +
                            "JOIN BObjednavka o ON p.cisloObjednavky = o.cisloObjednavky", Object[].class);

            List<Object[]> results = query.getResultList();

            // Populate data into the table model
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (Object[] result : results) {
                Object[] row = {
                        result[1],  // cisloObjednavky
                        result[0],  // cisloND
                        result[2],  // mnozstvo
                        result[3],  // cena
                        result[4],  // datumObjednavky
                        result[5]   // datumDorucenia
                };
                model.addRow(row);
            }
            transaction.commit();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní údajov: " + e.getMessage() + " Skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
    }

    private void vynulovaniePolicok() {
        jComboBoxCisloND.setSelectedItem(" ");
        jComboBoxCisloObj.setSelectedItem(" ");
        jTextFieldCena.setText("");
        jTextFieldMnozstvo.setText("");
        jTextFieldDatumDoruc.setText("");
        jTextFieldDatumObj.setText("");
    }

    private void jTableMouseClick_ActionPerformed(MouseEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int rowNumber = jTable1.getSelectedRow();

        BigInteger cisloND = (BigInteger) jTable1.getValueAt(rowNumber, 0);
        jComboBoxCisloND.setSelectedItem(cisloND.toString());

        BigInteger cisloObj = (BigInteger) jTable1.getValueAt(rowNumber, 1);
        jComboBoxCisloObj.setSelectedItem(cisloObj.toString());

        BigInteger mnozstvo = (BigInteger) jTable1.getValueAt(rowNumber, 2);
        jTextFieldMnozstvo.setText(mnozstvo.toString());
        Double cena = (Double) jTable1.getValueAt(rowNumber, 3);
        jTextFieldCena.setText(cena.toString());


        String datumObj = (String) jTable1.getValueAt(rowNumber, 4);
        jTextFieldDatumObj.setText(datumObj);

        if (jTable1.getValueAt(rowNumber, 5) != null) {
            String popis = (String) jTable1.getValueAt(rowNumber, 5);
            jTextFieldDatumDoruc.setText(popis);
        } else {
            jTextFieldDatumDoruc.setText("");
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // nacitam si vypisane udaje

        int rowNumber = jTable1.getSelectedRow();
        BigInteger cisloObjOriginal = new BigInteger(String.valueOf(jTable1.getValueAt(rowNumber, 1)));
        BigInteger cisloNDOriginal = new BigInteger(String.valueOf(jTable1.getValueAt(rowNumber, 0)));
        BigInteger cisloObj = new BigInteger(String.valueOf(jComboBoxCisloObj.getSelectedItem()));
        BigInteger cisloND = new BigInteger(String.valueOf(jComboBoxCisloND.getSelectedItem()));

        // restrikcie podla roly
        if (!loginGUI.getRolaZam().equals("S") || !loginGUI.getRolaZam().equals("A")) {
            //System.out.println(loginGUI.getOsCisloLogin());
            JOptionPane.showMessageDialog(null, "Nemôžete meniť tento záznam!");
            this.vynulovaniePolicok();
            return;
        }
        // obmedzenie pre UPDATE - nie je mozne vytvarat nove objednavky/polozkyObj
        if (!cisloND.equals(cisloNDOriginal) || !cisloObj.equals(cisloObjOriginal)) {
            JOptionPane.showMessageDialog(null, "Nemôžete meniť číslo objednávky alebo číslo ND, prosím skúste to znovu!");
            this.vynulovaniePolicok();
            return;
        }

        Double cena = Double.valueOf(String.valueOf(jTextFieldCena.getText()));
        BigInteger mnozstvo = new BigInteger(String.valueOf(jTextFieldMnozstvo.getText()));
        String datumObj = jTextFieldDatumObj.getText();
        String datumDor = jTextFieldDatumDoruc.getText();

        // overenie vypisania udajov
        if (cisloND.equals(" ") || cisloObj.equals(" ") ||
                mnozstvo.equals("") || cena.equals("") || datumObj.equals("")) {
            JOptionPane.showMessageDialog(null, "Prosím zadajte všetky povinné políčka!");
        } else {
            try {
                transaction.begin();

                // Načítanie záznamu z databázy na základe ID a uprava
                BPolozkaObjednavkyPK primaryKey = new BPolozkaObjednavkyPK(cisloObj, cisloND);
                BPolozkaObjednavky bPolozkaObjednavky = entityManager.find(BPolozkaObjednavky.class, primaryKey);
                BObjednavka bObjednavka = entityManager.find(BObjednavka.class, cisloObj);

                bObjednavka.setDatumObjednavky(datumObj);
                //bObjednavka.setDatumDorucenia("2023-12-12");
                bObjednavka.setDatumDorucenia(datumDor);
                System.out.println(jTextFieldDatumDoruc.getText());

                bPolozkaObjednavky.setMnozstvo(mnozstvo);
                bPolozkaObjednavky.setCena(cena);

                entityManager.persist(bObjednavka);
                entityManager.persist(bPolozkaObjednavky);

                transaction.commit();
                JOptionPane.showMessageDialog(null, "Zmena bola vykonana!");
                refreshTable();

            } catch (Exception e) {
                e.getCause();
                //e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri aktualizácii záznamu: " + e.getMessage() + " skúste to znovu!");
            } finally {
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonNovaObjednavkaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // restrikcie podla roly
        if (!loginGUI.getRolaZam().equals("S") || !loginGUI.getRolaZam().equals("A")) {
            //System.out.println(loginGUI.getOsCisloLogin());
            JOptionPane.showMessageDialog(null, "Nemáte oprávnenie na túto akciu!");
            this.vynulovaniePolicok();
            return;
        }

        try {
            transaction.begin();
            BObjednavka bObjednavka = new BObjednavka();
            //entityManager.persist(bObjednavka);
            //JOptionPane.showMessageDialog(null,"Bola vytvorená nová objednávka s číslom: " + bObjednavka.getCisloObjednavky());
            // aktualny datum
            LocalDate date = LocalDate.now();
            // formatovanie
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            String dateF = date.format(formatter);
            // nastavenie GUI
            bObjednavka.setDatumObjednavky(dateF);
            entityManager.persist(bObjednavka);
            transaction.commit();
            JOptionPane.showMessageDialog(null, "Bola vytvorená nová objednávka s číslom: " + bObjednavka.getCisloObjednavky());
            naplnComboBoxCisloObj();
            jComboBoxCisloObj.setSelectedItem(bObjednavka.getCisloObjednavky().toString());
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri vytváraní objednávky! " + e.getMessage() + " Skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeActionPerformed
        // vynulovanie textovych policok
        this.vynulovaniePolicok();
        this.dispose();
        guiManager.zviditelniHlavneMenu();
    }//GEN-LAST:event_jButtonHomeActionPerformed

    private void jButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {
        // nacitam si vypisane udaje

        int rowNumber = jTable1.getSelectedRow();
        //BigInteger cisloObjOriginal = new BigInteger(String.valueOf(jTable1.getValueAt(rowNumber, 1)));
        //BigInteger cisloNDOriginal = new BigInteger(String.valueOf(jTable1.getValueAt(rowNumber, 0)));
        BigInteger cisloObj = new BigInteger(String.valueOf(jComboBoxCisloObj.getSelectedItem()));
        BigInteger cisloND = new BigInteger(String.valueOf(jComboBoxCisloND.getSelectedItem()));

        // restrikcie podla roly
        if (!loginGUI.getRolaZam().equals("S") || !loginGUI.getRolaZam().equals("A")) {
            //System.out.println(loginGUI.getOsCisloLogin());
            JOptionPane.showMessageDialog(null, "Nemôžete meniť tento záznam!");
            this.vynulovaniePolicok();
            return;
        }

        Double cena = Double.valueOf(String.valueOf(jTextFieldCena.getText()));
        BigInteger mnozstvo = new BigInteger(String.valueOf(jTextFieldMnozstvo.getText()));
        String datumObj = jTextFieldDatumObj.getText();
        String datumDor = jTextFieldDatumDoruc.getText();

        // overenie vypisania udajov
        if (cisloND.equals(" ") || cisloObj.equals(" ") ||
                mnozstvo.equals("") || cena.equals("") || datumObj.equals("")) {
            JOptionPane.showMessageDialog(null, "Prosím zadajte všetky povinné políčka!");
        } else {
            try {
                transaction.begin();

                // Načítanie záznamu z databázy na základe ID a uprava
                BPolozkaObjednavkyPK primaryKey = new BPolozkaObjednavkyPK(cisloObj, cisloND);
                BPolozkaObjednavky bPolozkaObjednavky = new BPolozkaObjednavky();

                bPolozkaObjednavky.setMnozstvo(mnozstvo);
                bPolozkaObjednavky.setCena(cena);
                bPolozkaObjednavky.setCisloObjednavky(cisloObj);
                bPolozkaObjednavky.setCisloNd(cisloND);

                entityManager.persist(bPolozkaObjednavky);
                transaction.commit();
                JOptionPane.showMessageDialog(null, "Zmena bola vykonana!");
                refreshTable();

            } catch (Exception e) {
                e.getCause();
                //e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri vkladaní záznamu: " + e.getMessage() + " skúste to znovu!");
            } finally {
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        }
    }

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (jCheckBox1.isSelected()) {
            try {
                transaction.begin();
                this.refreshTableActual();

                // Retrieve data from the database using JPQL with a join
                TypedQuery<Object[]> query = entityManager.createQuery(
                        "SELECT p.cisloObjednavky, p.cisloNd, p.mnozstvo, p.cena, o.datumObjednavky, o.datumDorucenia " +
                                "FROM BPolozkaObjednavky p " +
                                "JOIN BObjednavka o ON p.cisloObjednavky = o.cisloObjednavky " +
                                "WHERE o.datumDorucenia IS NOT NULL", Object[].class);

                List<Object[]> results = query.getResultList();

                // Populate data into the table model
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                for (Object[] result : results) {
                    Object[] row = {
                            result[1],  // cisloObjednavky
                            result[0],  // cisloND
                            result[2],  // mnozstvo
                            result[3],  // cena
                            result[4],  // datumObjednavky
                            result[5]   // datumDorucenia
                    };
                    model.addRow(row);
                }
                transaction.commit();

            } catch (Exception e) {
                e.getCause();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri nacitavani udajov: " + e.getMessage() + " skúste to znovu!");
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        } else {
            this.refreshTable();
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonHome;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonInsert;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBoxCisloND;
    private javax.swing.JComboBox<String> jComboBoxCisloObj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldCena;
    private javax.swing.JTextField jTextFieldDatumDoruc;
    private javax.swing.JTextField jTextFieldDatumObj;
    private javax.swing.JTextField jTextFieldMnozstvo;
    // End of variables declaration//GEN-END:variables
}
