/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Porucha;

import GUI.GUIManager;
import GUI.Login.LoginGUI;
import GUI.Login.LoginListener;
import Sifrovanie.DateFormat;
import Tabulky.BPorucha;
import Tabulky.BUdrzbaPoruchy;

import javax.persistence.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * @author Mario
 */
public class PoruchaGUI extends javax.swing.JFrame implements LoginListener {

    /**
     * Creates new form PoruchaGUI
     */
    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("default");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    EntityTransaction transaction = entityManager.getTransaction();

    private GUIManager guiManager;
    private LoginGUI loginGUI;
    private String rolaA;
    private BigInteger osCisloOpravyA;
    private PrebratiePoruchyListener prebratieListener;
    private DateFormat dateFormat;

    public PoruchaGUI(GUIManager guiManager, LoginGUI loginGUI) {
        initComponents3();
        this.guiManager = guiManager;
        this.loginGUI = loginGUI;
        this.dateFormat = new DateFormat();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // vynulovanie textovych policok
                vynulovaniePolicok();
                guiManager.zviditelniHlavneMenu();
            }
        });
        this.displayDataInTable();

        //naplnComboBoxIdStrojov();
        loginGUI.setLoginListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents3() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonHome = new javax.swing.JButton();
        jComboBoxIdStroja = new javax.swing.JComboBox<>();
        jComboBoxZavaznost = new javax.swing.JComboBox<>();
        jComboBoxStrojVPrevadzke = new javax.swing.JComboBox<>();
        jComboBoxTypPoruchy = new javax.swing.JComboBox<>();
        jTextFieldPoruchaOd = new javax.swing.JTextField();
        jTextFieldPoruchaDo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButtonInsert = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaPopis = new javax.swing.JTextArea();
        jCheckBoxAktualne = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jButtonPrebratie = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1110, 700));
        setMinimumSize(new java.awt.Dimension(1078, 700));
        setPreferredSize(new java.awt.Dimension(1100, 700));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("PORUCHA");

        //jButtonHome.setBackground(new java.awt.Color(255, 255, 254));
        //jButtonHome.setText("H");

        // Load the image from file
        ImageIcon icon = new ImageIcon("C:\\Users\\Mario\\Desktop\\bakalarka\\hibernate_bakalarka\\H_bakalarka\\icons\\home_button2.png");

        // Resize the image
        Image image = icon.getImage(); // transform it
        Image newImg = image.getScaledInstance(25, 25, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
        icon = new ImageIcon(newImg);  // transform it back
        // nastavenia farieb
        Color backgroundColor = new Color(255, 204, 153);
        jButtonHome.setBorder(null);
        jButtonHome.setBackground(backgroundColor);

        // Set icon
        jButtonHome.setIcon(icon);
        jButtonHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHomeActionPerformed(evt);
            }
        });

        jComboBoxIdStroja.setBackground(new java.awt.Color(255, 255, 254));
        //jComboBoxIdStroja.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxZavaznost.setBackground(new java.awt.Color(255, 255, 254));
        jComboBoxZavaznost.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{" ","1", "2", "3", "4"}));

        jComboBoxStrojVPrevadzke.setBackground(new java.awt.Color(255, 255, 254));
        jComboBoxStrojVPrevadzke.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{" ","0", "1"}));

        jComboBoxTypPoruchy.setBackground(new java.awt.Color(255, 255, 254));
        jComboBoxTypPoruchy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{" ","E", "M", "I", "H", "B"}));

        jTextFieldPoruchaOd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTextFieldPoruchaDo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel3.setText("ID stroja*:");

        jLabel4.setText("závažnosť*:");

        jLabel5.setText("stroj v prevádzke*:");

        jLabel6.setText("typ poruchy*:");

        jLabel7.setText("porucha od*:");

        jLabel8.setText("porucha do:");

        jLabel9.setText("popis poruchy:");

        jButtonInsert.setBackground(new java.awt.Color(255, 255, 254));
        jButtonInsert.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonInsert.setText("INSERT");
        jButtonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertActionPerformed(evt);
            }
        });

        jButtonUpdate.setBackground(new java.awt.Color(255, 255, 254));
        jButtonUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jTextAreaPopis.setBackground(new java.awt.Color(255, 255, 254));
        jTextAreaPopis.setColumns(20);
        jTextAreaPopis.setRows(5);
        jTextAreaPopis.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jScrollPane2.setViewportView(jTextAreaPopis);

        jCheckBoxAktualne.setBackground(new java.awt.Color(255, 204, 153));
        jCheckBoxAktualne.setFont(new java.awt.Font("Segoe UI", 0, 9)); // NOI18N
        jCheckBoxAktualne.setText("Len aktívne Poruchy");
        jCheckBoxAktualne.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jCheckBoxAktualne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAktualneActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 9)); // NOI18N
        jLabel10.setText("*menšie číslo = vyššia závažnosť");

        jButtonPrebratie.setBackground(new java.awt.Color(255, 255, 254));
        jButtonPrebratie.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonPrebratie.setText("PREBRAŤ");
        jButtonPrebratie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrebratieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel10)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel6)
                                                                        .addComponent(jLabel5)
                                                                        .addComponent(jLabel4)
                                                                        .addComponent(jLabel3)
                                                                        .addComponent(jLabel8)
                                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                                .addGap(23, 23, 23)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jTextFieldPoruchaOd, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jComboBoxTypPoruchy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jComboBoxZavaznost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jComboBoxStrojVPrevadzke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jComboBoxIdStroja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jTextFieldPoruchaDo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jButtonInsert)
                                                                .addGap(28, 28, 28)
                                                                .addComponent(jButtonUpdate)
                                                                .addGap(28, 28, 28)
                                                                .addComponent(jButtonPrebratie))
                                                        .addComponent(jCheckBoxAktualne)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButtonHome)
                                                .addGap(97, 97, 97)
                                                .addComponent(jLabel1)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jButtonHome))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(jLabel1)))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxIdStroja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxZavaznost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxStrojVPrevadzke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxTypPoruchy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextFieldPoruchaOd, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(jTextFieldPoruchaDo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                .addComponent(jCheckBoxAktualne)
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonPrebratie, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addComponent(jLabel10)
                                .addGap(20, 20, 20))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "ID poruchy", "os. cislo nahlasenia", "ID stroja", "zavaznost", "stroj v prevadzke", "typ poruchy", "porucha od", "porucha do", "popis poruchy"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClick_ActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    private void displayDataInTable() {
        try {
            transaction.begin();

            //ziskanie dat
            //pouzitie JPQL - rozumie tomu framework hibernate
            TypedQuery<BPorucha> query = entityManager.createQuery("SELECT s FROM BPorucha s ", BPorucha.class);

            List<BPorucha> results = query.getResultList();

            // nahra udaje priamo do tabulky jTable1
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (BPorucha result : results) {
                Object[] row = {
                        result.getIdPoruchy(),          // id poruchy
                        result.getOsCisloNahlasenia(),  // os cislo nahlasenia
                        result.getIdStroja(),           // id stroja
                        result.getZavaznostD(),         // zavaznost poruchy
                        result.getStrojVPrevadzke(),    // ci je stroj v prevadzke
                        result.getTypPoruchyD(),        // typ poruchy
                        result.getPoruchaOd(),          // porucha do
                        result.getPoruchaDo(),          // porucha do
                        result.getPopisPoruchy()        // popis
                };
                model.addRow(row);
            }
            transaction.commit();

        } catch (Exception e) {
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri nacitavani udajov: " + e.getMessage() + " skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
    }

    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // nacitam ju znova
        this.displayDataInTable();

        // vynulovanie textovych policok
        this.vynulovaniePolicok();
    }

    private void refreshTableActual() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // vynulovanie textovych policok
        this.vynulovaniePolicok();
    }

    private void closeApplication() {
        // cleanup code:
        entityManager.close();
        entityManagerFactory.close();
    }

    @Override
    // sluzi na naplnenie komboboxu po uspesnom logine (inak to hadzalo nullException)
    public void onLoginSuccess() {
        System.out.println("onLoginSuccess - PoruchaGUI");
        this.rolaA = this.loginGUI.getRolaZam();
        this.osCisloOpravyA = this.loginGUI.getOsCisloLogin();
        naplnComboBoxIdStrojov();
    }

    public void setPrebratieListener(PrebratiePoruchyListener listener) {
        this.prebratieListener = listener;
    }

    private void onPrebratieSuccess() {
        if (prebratieListener != null) {
            prebratieListener.onPrebratieSuccess();
        }
    }

    private void naplnComboBoxIdStrojov() {
        TypedQuery<BigInteger> query;
        List<BigInteger> idcka;

        if (loginGUI.getRolaZam().equals("I")) {
            String pracovisko = loginGUI.getCisloHaly();
            pracovisko = pracovisko.substring(2);
            query = entityManager.createQuery("SELECT t.id FROM BStroj t WHERE t.cisloHaly LIKE :pracovisko", BigInteger.class);
            query.setParameter("pracovisko", pracovisko);
            idcka = query.getResultList();
            //System.out.println("tu som: " + pracovisko);
        } else {
            query = entityManager.createQuery("SELECT t.id FROM BStroj t", BigInteger.class);
            idcka = query.getResultList();
            //System.out.println("tu som2");
        }
        try {

            transaction.begin();

            //TypedQuery<BigInteger> query = entityManager.createQuery("SELECT t.id FROM BStroj t", BigInteger.class);
            //List<BigInteger> idcka = query.getResultList();

            // Vytvorte model pre JComboBox
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            comboBoxModel.addElement(" ");
            for (BigInteger results : idcka) {
                comboBoxModel.addElement(results.toString());
            }

            // Nastavte model do JComboBox
            jComboBoxIdStroja.setModel(comboBoxModel);

            // Commit
            transaction.commit();
        } catch (Exception e) {
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní ID strojov: " + e.getMessage() + " skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
    }

    private void jTableMouseClick_ActionPerformed(MouseEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int rowNumber = jTable1.getSelectedRow();

        //String osCislo = (String) jTable1.getValueAt(rowNumber,1).toString();
        //jTextFieldOs_cislo_nahlasenia.setText(osCislo);

        String idStroja = (String) jTable1.getValueAt(rowNumber, 2).toString();
        jComboBoxIdStroja.setSelectedItem(idStroja);

        String zavaznost = (String) jTable1.getValueAt(rowNumber, 3).toString();
        jComboBoxZavaznost.setSelectedItem(zavaznost);

        String vPrevadzke = (String) jTable1.getValueAt(rowNumber, 4).toString();
        jComboBoxStrojVPrevadzke.setSelectedItem(vPrevadzke);

        String typPoruchy = (String) jTable1.getValueAt(rowNumber, 5);
        jComboBoxTypPoruchy.setSelectedItem(typPoruchy);

        String poruchaOd = (String) jTable1.getValueAt(rowNumber, 6);
        jTextFieldPoruchaOd.setText(poruchaOd);

        if (jTable1.getValueAt(rowNumber, 7) != null) {
            String poruchaDo = (String) jTable1.getValueAt(rowNumber, 7);
            jTextFieldPoruchaDo.setText(poruchaDo);
        } else {
            jTextFieldPoruchaDo.setText("");
        }

        if (jTable1.getValueAt(rowNumber, 8) != null) {
            String popis = (String) jTable1.getValueAt(rowNumber, 8);
            jTextAreaPopis.setText(popis);
        } else {
            jTextAreaPopis.setText("");
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jCheckBoxAktualneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAktualneActionPerformed

        if (jCheckBoxAktualne.isSelected()) {
            try {
                transaction.begin();
                this.refreshTableActual();

                //ziskanie dat
                //pouzitie JPQL - rozumie tomu framework hibernate
                TypedQuery<BPorucha> query = entityManager.createQuery("SELECT s FROM BPorucha s WHERE s.poruchaDo IS NULL ", BPorucha.class);

                List<BPorucha> results = query.getResultList();

                // nahra udaje priamo do tabulky jTable1
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                for (BPorucha result : results) {
                    Object[] row = {
                            result.getIdPoruchy(),          // id poruchy
                            result.getOsCisloNahlasenia(),  // os cislo nahlasenia
                            result.getIdStroja(),           // id stroja
                            result.getZavaznostD(),         // zavaznost poruchy
                            result.getStrojVPrevadzke(),    // ci je stroj v prevadzke
                            result.getTypPoruchyD(),        // typ poruchy
                            result.getPoruchaOd(),          // porucha do
                            result.getPoruchaDo(),          // porucha do
                            result.getPopisPoruchy()        // popis
                    };
                    model.addRow(row);
                }
                transaction.commit();

            } catch (Exception e) {
                e.getCause();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri nacitavani udajov: " + e.getMessage() + " skúste to znovu!");
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        } else {
            this.refreshTable();
        }
    }//GEN-LAST:event_jCheckBoxAktualneActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // nacitam si vypisane udaje

        int rowNumber = jTable1.getSelectedRow();
        BigInteger osCislo = new BigInteger(String.valueOf(jTable1.getValueAt(rowNumber, 1)));

        if (loginGUI.getRolaZam().equals("I")) {
            if (!osCislo.equals(loginGUI.getOsCisloLogin())) {
                //System.out.println(loginGUI.getOsCisloLogin());
                JOptionPane.showMessageDialog(null, "Nemôžete meniť tento záznam!");
                this.vynulovaniePolicok();
                return;
            }
            //System.out.println("tu som");
        }
        //System.out.println("tu som2");
        //BigInteger osCisloBigInt = new BigInteger(String.valueOf(28));

        String idStroja = (String) jComboBoxIdStroja.getSelectedItem();
        BigInteger idStrojaBigInt = new BigInteger(idStroja);

        String zavaznost = (String) jComboBoxZavaznost.getSelectedItem();
        String vPrevadzke = (String) jComboBoxStrojVPrevadzke.getSelectedItem();
        BigInteger vPrevadzkeBigInt = new BigInteger(vPrevadzke);

        String typPoruchy = (String) jComboBoxTypPoruchy.getSelectedItem();
        String poruchaOd = jTextFieldPoruchaOd.getText();

        // moze byt null
        String poruchaDo = jTextFieldPoruchaDo.getText();
        String popis = jTextAreaPopis.getText();

        // overenie vypisania udajov
        if (/*osCislo.equals("") || */idStroja.equals(" ") || zavaznost.equals(" ") ||
                vPrevadzke.equals(" ") || typPoruchy.equals(" ") || poruchaOd.equals("")) {
            JOptionPane.showMessageDialog(null, "Prosím zadajte všetky povinné políčka!");

        } else {
            try {
                transaction.begin();

                // pre vratenie ID
                BigInteger id = (BigInteger) jTable1.getValueAt(rowNumber, 0);

                // Načítanie záznamu z databázy na základe ID a uprava
                BPorucha bPorucha = entityManager.find(BPorucha.class, id);

                bPorucha.setOsCisloNahlasenia(osCislo);
                bPorucha.setIdStroja(idStrojaBigInt);
                bPorucha.setZavaznostD(zavaznost);
                bPorucha.setStrojVPrevadzke(vPrevadzkeBigInt);
                bPorucha.setTypPoruchyD(typPoruchy);
                if (!dateFormat.overenie(poruchaOd)) {
                    this.vynulovaniePolicok();
                    return;
                }
                if (!poruchaDo.isEmpty()) {
                    if (!dateFormat.overenie(poruchaDo)) {
                        this.vynulovaniePolicok();
                        return;
                    }
                }
                bPorucha.setPoruchaOd(poruchaOd);
                bPorucha.setPoruchaDo(poruchaDo);
                bPorucha.setPopisPoruchy(popis);

                entityManager.persist(bPorucha);
                transaction.commit();
                JOptionPane.showMessageDialog(null, "Zmena bola vykonana!");

                this.refreshTable();

            } catch (Exception e) {
                e.getCause();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri aktualizácii záznamu: " + e.getMessage() + " skúste to znovu!");
            } finally {
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertActionPerformed
        // TODO - zabezpecit chybove vypisy - ked su povinne policka null
        BigInteger osCisloBigInt = loginGUI.getOsCisloLogin();
        //BigInteger osCisloBigInt = new BigInteger(String.valueOf(28));

        String idStroja = (String) jComboBoxIdStroja.getSelectedItem();
        BigInteger idStrojaBigInt = new BigInteger(idStroja);

        String zavaznost = (String) jComboBoxZavaznost.getSelectedItem();
        String vPrevadzke = (String) jComboBoxStrojVPrevadzke.getSelectedItem();
        BigInteger vPrevadzkeBigInt = new BigInteger(vPrevadzke);

        String typPoruchy = (String) jComboBoxTypPoruchy.getSelectedItem();
        String poruchaOd = jTextFieldPoruchaOd.getText();

        // moze byt null
        String poruchaDo = jTextFieldPoruchaDo.getText();
        String popis = jTextAreaPopis.getText();

        // overenie vypisania udajov
        if (/*osCislo.equals("") || */idStroja.equals(" ") || zavaznost.equals(" ") ||
                vPrevadzke.equals(" ") || typPoruchy.equals(" ") || poruchaOd.equals("")) {
            JOptionPane.showMessageDialog(null, "Prosím zadajte všetky povinné políčka!");

        } else {
            try {
                transaction.begin();

                if (!dateFormat.overenie(poruchaOd)) {
                    this.vynulovaniePolicok();
                    return;
                }
                if (!poruchaDo.isEmpty()) {
                    if (!dateFormat.overenie(poruchaDo)) {
                        this.vynulovaniePolicok();
                        return;
                    }
                }
                // vytvorenie noveho zamestnanca s vypisanymi udajmi
                BPorucha bPorucha = new BPorucha();
                bPorucha.setOsCisloNahlasenia(osCisloBigInt);
                bPorucha.setIdStroja(idStrojaBigInt);
                bPorucha.setZavaznostD(zavaznost);
                bPorucha.setStrojVPrevadzke(vPrevadzkeBigInt);
                bPorucha.setTypPoruchyD(typPoruchy);
                bPorucha.setPoruchaOd(poruchaOd);
                bPorucha.setPoruchaDo(poruchaDo);
                bPorucha.setPopisPoruchy(popis);

                entityManager.persist(bPorucha);
                transaction.commit();
                JOptionPane.showMessageDialog(null, "Nová porucha bola vložená!");

                this.refreshTable();

            } catch (Exception e) {
                e.getCause();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri vkladani záznamu: " + e.getMessage() + " skúste to znovu!");
            } finally {
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        }
    }//GEN-LAST:event_jButtonInsertActionPerformed

    private void jButtonPrebratieActionPerformed(java.awt.event.ActionEvent evt) {

        int actualRowNumber = -1;
        actualRowNumber = jTable1.getSelectedRow();
        if (actualRowNumber < 0) {
            JOptionPane.showMessageDialog(null, "Vyberte riadok v tabuľke!");
            this.vynulovaniePolicok();
            return;
        }

        if (this.rolaA.equals("I") || this.rolaA.equals("S")) {
            JOptionPane.showMessageDialog(null, "Na tento úkon nemáte oprávnenie!");
            return;
        }

        try {
            transaction.begin();

            if (jTable1.getValueAt(actualRowNumber, 7) != null) {
                JOptionPane.showMessageDialog(null, "Táto porucha už nie je aktuálna!");
                return;
            }
            // vytvorenie novej entity s vypisanymi udajmi
            BUdrzbaPoruchy bUdrzbaPoruchy = new BUdrzbaPoruchy();
            bUdrzbaPoruchy.setIdPoruchy((BigInteger) jTable1.getValueAt(actualRowNumber, 0));
            bUdrzbaPoruchy.setOsCisloOpravy(this.osCisloOpravyA);

            // aktualny datum
            LocalDate date = LocalDate.now();
            // formatovanie
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            String dateF = date.format(formatter);
            // nastavenie GUI
            bUdrzbaPoruchy.setPrebratiePoruchy(dateF);


            entityManager.persist(bUdrzbaPoruchy);
            transaction.commit();
            JOptionPane.showMessageDialog(null, "Porucha bola prebratá!");
            this.onPrebratieSuccess();

            this.refreshTable();

        } catch (
                Exception e) {
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri preberaní záznamu: " + e.getMessage() + " skúste to znovu!");
        } finally {
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
        jTable1.clearSelection();
    }

    private void jButtonHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeActionPerformed
        // vynulovanie textovych policok
        this.vynulovaniePolicok();

        this.dispose();
        guiManager.zviditelniHlavneMenu();
    }//GEN-LAST:event_jButtonHomeActionPerformed

    public void vynulovaniePolicok() {
        // vynulovanie textovych policok
        //jTextFieldOs_cislo_nahlasenia.setText("");
        jComboBoxIdStroja.setSelectedItem(" ");
        jComboBoxTypPoruchy.setSelectedItem(" ");
        jComboBoxZavaznost.setSelectedItem(" ");
        jComboBoxStrojVPrevadzke.setSelectedItem(" ");
        jTextFieldPoruchaOd.setText("");
        jTextFieldPoruchaDo.setText("");
        jTextAreaPopis.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonHome;
    private javax.swing.JButton jButtonInsert;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonPrebratie;
    private javax.swing.JCheckBox jCheckBoxAktualne;
    private javax.swing.JComboBox<String> jComboBoxIdStroja;
    private javax.swing.JComboBox<String> jComboBoxStrojVPrevadzke;
    private javax.swing.JComboBox<String> jComboBoxTypPoruchy;
    private javax.swing.JComboBox<String> jComboBoxZavaznost;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextAreaPopis;
    private javax.swing.JTextField jTextFieldPoruchaDo;
    private javax.swing.JTextField jTextFieldPoruchaOd;
    // End of variables declaration//GEN-END:variables
}
