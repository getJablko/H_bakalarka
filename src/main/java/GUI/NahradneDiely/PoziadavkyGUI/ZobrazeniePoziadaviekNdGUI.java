/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.NahradneDiely.PoziadavkyGUI;

import GUI.GUIManager;
import GUI.Login.LoginGUI;
import GUI.NahradneDiely.NahradneDielyGUI;
import GUI.NahradneDiely.Poziadavka2Listener;
import GUI.Porucha.PrebratiePoruchyListener;
import GUI.UdrzbaPoruchy.UdrzbaND.UdrzbaNahradnyDielGUI;
import Tabulky.BNahradnyDiel;

import javax.persistence.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigInteger;
import java.util.List;

/**
 * @author Mario
 */
public class ZobrazeniePoziadaviekNdGUI extends javax.swing.JFrame  {

    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("default");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    EntityTransaction transaction = entityManager.getTransaction();
    private GUIManager guiManager;
    private LoginGUI loginGUI;

    private NahradneDielyGUI nahradneDielyGUI;
    private UdrzbaNahradnyDielGUI udrzbaNahradnyDielGUI;
    private Poziadavka2Listener poziadavkaUpdate;

    /**
     * Creates new form UdrzbaNahradnyDielGUI
     */
    public ZobrazeniePoziadaviekNdGUI(GUIManager guiManager, LoginGUI loginGUI,NahradneDielyGUI nahradneDielyGUI, UdrzbaNahradnyDielGUI udrzbaNahradnyDielGUI) {
        initComponents();
        this.guiManager = guiManager;
        this.loginGUI = loginGUI;
        this.udrzbaNahradnyDielGUI = udrzbaNahradnyDielGUI;
        this.nahradneDielyGUI = nahradneDielyGUI;


        setAlwaysOnTop(true); // Set the JFrame to always stay on top
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // vynulovanie textovych policok
                vynulovaniePolicok();
                guiManager.zobrazNahradneDiely();
            }
        });

        this.displayDataInTable();
        this.naplnComboBoxCisloDielu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxCisloDielu = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaPoziadavka = new javax.swing.JTextArea();
        jButtonUpdate = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldNazovND = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldDostupneMnozstvo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("POŽIADAVKA NA DIEL");

        jComboBoxCisloDielu.setBackground(new java.awt.Color(255, 255, 254));
        //jComboBoxCisloDielu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("číslo dielu*:");

        jLabel3.setText("požiadavka:");

        jTextAreaPoziadavka.setColumns(20);
        jTextAreaPoziadavka.setRows(5);
        jTextAreaPoziadavka.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jTextAreaPoziadavka.setEnabled(false);
        jScrollPane2.setViewportView(jTextAreaPoziadavka);

        jButtonUpdate.setBackground(new java.awt.Color(255, 255, 254));
        jButtonUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonExit.setBackground(new java.awt.Color(255, 255, 254));
        jButtonExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonExit.setText("EXIT");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabel4.setText("názov ND*:");

        jTextFieldNazovND.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jTextFieldNazovND.setEnabled(false);

        jLabel5.setText("dostupné(ks)*:");

        jTextFieldDostupneMnozstvo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jButtonUpdate)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGap(39, 39, 39)
                                                                .addComponent(jLabel1)))
                                                .addGap(0, 61, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(jLabel2)
                                                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addComponent(jLabel5))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jTextFieldDostupneMnozstvo)
                                                        .addComponent(jTextFieldNazovND, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                                                        .addComponent(jComboBoxCisloDielu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel1)
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxCisloDielu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(jTextFieldNazovND, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextFieldDostupneMnozstvo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(106, 106, 106))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "ID poruchy", "os číslo opravy", "číslo ND", "požiadavka ND", "názov ND", "dostupné množstvo ND"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClick_ActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
        );

        // Set the combo box to be non-editable
        jComboBoxCisloDielu.setFocusable(false);
        jComboBoxCisloDielu.setEnabled(false);
        jComboBoxCisloDielu.setEditable(false);
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vynulovaniePolicok() {
        jTextFieldDostupneMnozstvo.setText("");
        jTextAreaPoziadavka.setText("");
        jComboBoxCisloDielu.setSelectedItem(" ");
        jTextFieldNazovND.setText("");
    }

    private void closeApplication() {
        // cleanup code:
        entityManager.close();
        entityManagerFactory.close();
    }

    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // nacitam ju znova
        this.displayDataInTable();

        // vynulovanie textovych policok
        this.vynulovaniePolicok();
    }

    private void displayDataInTable() {
        try {
            transaction.begin();

            // ziskanie dat - JPQL
            TypedQuery<Object[]> query = entityManager.createQuery(
                    "SELECT DISTINCT up.idPoruchy, up.osCisloOpravy, up.cisloNd, up.pozadavkaNd, nd.nazovND, nd.dostupneMnozstvo " +
                            "FROM BUdrzbaPoruchyNahradnyDiel up " +
                            "JOIN BNahradnyDiel nd on up.cisloNd = nd.cisloNd " +
                            "JOIN BUdrzbaPoruchy u ON u.idPoruchy = up.idPoruchy AND u.osCisloOpravy = up.osCisloOpravy ", Object[].class);

            List<Object[]> results = query.getResultList();

            // nacitanie udajov
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (Object[] result : results) {
                Object[] row = {
                        result[0],  // idPoruchy
                        result[1],  // osCisloOpravy
                        result[2],  // cisloND
                        result[3],  // poziadavka
                        result[4],  // nazovND
                        result[5],  // dostupneMnozstvo
                };
                model.addRow(row);
            }
            transaction.commit();

        } catch (Exception e) {
            JOptionPane.getRootFrame().setAlwaysOnTop(true);
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní údajov: " + e.getMessage() + " Skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
        JOptionPane.getRootFrame().setAlwaysOnTop(false);
    }

    public void setPoziadavkaUpdate(Poziadavka2Listener listener) {
        this.poziadavkaUpdate = listener;
    }

    private void onPoziadavkaUpdate() {
        if (poziadavkaUpdate != null) {
            poziadavkaUpdate.onPoziadavkaUpdate();
        }
    }

    private void naplnComboBoxCisloDielu() {
        TypedQuery<BigInteger> query;
        List<BigInteger> idcka;

        query = entityManager.createQuery(
                "SELECT DISTINCT nd.cisloNd " +
                        "FROM BNahradnyDiel nd", BigInteger.class);

        idcka = query.getResultList();
        try {

            transaction.begin();
            // Vytvorte model pre JComboBox
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            comboBoxModel.addElement(" ");
            for (BigInteger results : idcka) {
                comboBoxModel.addElement(results.toString());
            }
            // Nastavte model do JComboBox
            jComboBoxCisloDielu.setModel(comboBoxModel);

            // Commit
            transaction.commit();
        } catch (Exception e) {
            JOptionPane.getRootFrame().setAlwaysOnTop(true);
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní ID strojov: " + e.getMessage() + " skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
        JOptionPane.getRootFrame().setAlwaysOnTop(false);
    }

    private void jTableMouseClick_ActionPerformed(MouseEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int rowNumber = jTable1.getSelectedRow();

        String nazovND = (String) jTable1.getValueAt(rowNumber, 4);
        jTextFieldNazovND.setText(nazovND);
        BigInteger cisloDielu = (BigInteger) jTable1.getValueAt(rowNumber, 2);
        jComboBoxCisloDielu.setSelectedItem(cisloDielu.toString());
        BigInteger dostupneMnozstvo = (BigInteger) jTable1.getValueAt(rowNumber, 5);
        jTextFieldDostupneMnozstvo.setText(dostupneMnozstvo.toString());

        if (jTable1.getValueAt(rowNumber, 3) != null) {
            String poziadavka = (String) jTable1.getValueAt(rowNumber, 3);
            jTextAreaPoziadavka.setText(poziadavka);
        } else {
            jTextAreaPoziadavka.setText("");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
        JOptionPane.getRootFrame().setAlwaysOnTop(true);

        int actualRowNumber = -1;
        actualRowNumber = jTable1.getSelectedRow();
        if (actualRowNumber < 0) {
            JOptionPane.showMessageDialog(null, "Vyberte riadok v tabuľke!");
            this.vynulovaniePolicok();
            return;
        }
        BigInteger cisloND = (BigInteger) jTable1.getValueAt(actualRowNumber, 2);
        // restrikcie podla roly
        if (!loginGUI.getRolaZam().equals("S") && !loginGUI.getRolaZam().equals("A")) {
            //System.out.println(loginGUI.getOsCisloLogin());
            JOptionPane.showMessageDialog(null, "Nemôžete meniť tento záznam!");
            this.vynulovaniePolicok();
            return;
        }
        String dostupneMnozstvoText = jTextFieldDostupneMnozstvo.getText();
        BigInteger dostupneMnozstvo = null;

        // overenie ci dostupneMnozstvo nie je prazdne
        if (!dostupneMnozstvoText.isEmpty()) {
            dostupneMnozstvo = new BigInteger(dostupneMnozstvoText);
        }
        try {
            transaction.begin();

            // Načítanie záznamu z databázy na základe ID a uprava
            BNahradnyDiel bNahradnyDiel = entityManager.find(BNahradnyDiel.class, cisloND);
            bNahradnyDiel.setDostupneMnozstvo(dostupneMnozstvo);

            entityManager.persist(bNahradnyDiel);
            transaction.commit();
            JOptionPane.showMessageDialog(null, "Zmena bola vykonana!");
            this.refreshTable();
        } catch (Exception e) {
            e.getCause();
            //e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri aktualizácii záznamu: " + e.getMessage() + " skúste to znovu!");
        } finally {
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
        // vynuluje selected row
        jTable1.clearSelection();
        JOptionPane.getRootFrame().setAlwaysOnTop(false);
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        this.vynulovaniePolicok();
        this.dispose();
        this.guiManager.zobrazNahradneDiely();
        // TODO
        // refresh tables
        nahradneDielyGUI.onPoziadavkaUpdate();
        udrzbaNahradnyDielGUI.onPoziadavkaUpdate();
    }//GEN-LAST:event_jButtonExitActionPerformed


    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxCisloDielu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextAreaPoziadavka;
    private javax.swing.JTextField jTextFieldDostupneMnozstvo;
    private javax.swing.JTextField jTextFieldNazovND;

    // End of variables declaration//GEN-END:variables
}
