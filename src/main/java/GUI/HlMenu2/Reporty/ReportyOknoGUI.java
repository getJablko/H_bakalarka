/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.HlMenu2.Reporty;

import GUI.GUIManager;
import GUI.HlMenu2.HlMenuGUI;
import GUI.Menu.Graphs.GraphBarChart;
import GUI.Menu.Graphs.GraphPieChart;
import Sifrovanie.DateFormat;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.PDResources;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType0Font;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;
import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import javax.imageio.ImageIO;
import javax.persistence.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Mario
 */
public class ReportyOknoGUI extends javax.swing.JFrame {
    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("default");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    EntityTransaction transaction = entityManager.getTransaction();
    private String datumOd;
    private String datumDo;
    private GUIManager guiManager;
    private DateFormat dateFormat;
    private String popis1;
    private HlMenuGUI hlMenuGUI;
    private ArrayList<String> stringPopis1;

    /**
     * Creates new form reportyOknoGUI
     */
    public ReportyOknoGUI(GUIManager guiManager, HlMenuGUI hlMenuGUI) {
        this.guiManager = guiManager;
        this.hlMenuGUI = hlMenuGUI;

        this.stringPopis1 = new ArrayList<>();
        this.dateFormat = new DateFormat();
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                jTextField2.setText("");
                jTextField1.setText("");
                dispose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(244, 244, 244));

        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTextField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));


        jLabel1.setText("dátum od*:");

        jLabel2.setText("dátum do*:");

        jLabel3.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        jLabel3.setText("Zadaj časové rozpätie reportu");

        jButton1.setBackground(new java.awt.Color(255, 255, 254));
        jButton1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButton1.setText("Generuj");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton1ActionPerformed(evt);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel3)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton1)
                                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_jButton1ActionPerformed
        if (jTextField1.equals("") || jTextField2.equals("")) {
            JOptionPane.showMessageDialog(null, "zadaj povinne policka!");
            return;
        }
        if (!dateFormat.overenie(jTextField2.getText()) || !dateFormat.overenie(jTextField1.getText())) {
            jTextField2.setText("");
            jTextField1.setText("");
            return;
        }

        this.datumDo = jTextField2.getText();
        this.datumOd = jTextField1.getText();
        jTextField2.setText("");
        jTextField1.setText("");

        if (this.datumOd.compareTo(this.datumDo) >= 0) {
            JOptionPane.showMessageDialog(null,"Nesprávne zadané dátumy!");
            return;
        }

        this.naplnPopis1();
        this.zobrazGraf2();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void zobrazGraf1() throws IOException {
        GraphPieChart pie = new GraphPieChart(this.datumOd, this.datumDo);
        String filePath = "reports\\Dok1.pdf";
        String content = "Môj prvý PDF report!";
        String graphImagePath = "reports\\pie_chart.png"; // Replace with the actual path

        try {
            BufferedImage graphImage = ImageIO.read(new File(graphImagePath));
            generatePdfReport(filePath, content, graphImage);
        } catch (IOException e) {
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri vkladaní údajov do PDF reportu! " + e.getMessage());
        }
    }

    private void zobrazGraf2() throws IOException {
        GraphBarChart bar = new GraphBarChart();
        String filePath = "reports\\Dok1.pdf";
        //String content = "Toto je 2. graf!";
        String content = String.valueOf(this.stringPopis1);
        //content = content.replaceAll("\\t", "   ");
        //System.out.println(this.popis1);
        String graphImagePath = "reports\\bar_chart.png"; // Replace with the actual path

        try {
            BufferedImage graphImage = ImageIO.read(new File(graphImagePath));
            generatePdfReport(filePath, content, graphImage);
        } catch (IOException e) {
            e.getCause();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri vkladaní údajov do PDF reportu! " + e.getMessage());
        }
    }

    private void generatePdfReport(String filePath, String content, BufferedImage graphImage) throws IOException {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.A4);
            document.addPage(page);
            // 2020-10-10
            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                // Add text
                PDFont formFont = PDType0Font.load(document, Files.newInputStream(Paths.get("font\\cour.ttf")), false);
                PDResources res = new PDResources();
                //PDType1Font pdType1Font = new PDType1Font(Standard14Fonts.FontName.COURIER);

                String fontName = res.add(formFont).getName();
                String defaultAppearanceString = "/" + fontName + " 12 Tf"; // Adjust font size if needed

                int y = 700; // Initial y-coordinate
                for (String element : stringPopis1) {
                    contentStream.beginText();
                    contentStream.setFont(formFont, 12);
                    contentStream.newLineAtOffset(100, y); // Set position for current line
                    contentStream.showText(element);
                    contentStream.endText();
                    y -= 15; // Move to the next line
                }

                // Create a PDImageXObject from the BufferedImage
                PDImageXObject pdImage = LosslessFactory.createFromImage(document, graphImage);

                // Add the graph image
                contentStream.drawImage(pdImage, 80, y-235, 435, 225); // Adjust coordinates and dimensions
            } catch (Exception e) {
                e.getCause();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri generovaní PDF reportu! " + e.getMessage());
            }
            document.save(filePath);
        }
    }

    private void naplnPopis1() {
        try {
            transaction.begin();

            // Retrieve data from the database using JPQL with a join
            TypedQuery<Object[]> query = entityManager.createQuery(
                    "SELECT p.idStroja, " +
                            "COUNT(DISTINCT p.idPoruchy) AS priemernyPocetPoruch " +
                            "FROM BPorucha p " +
                            "GROUP BY p.idStroja " +
                            "ORDER BY p.idStroja ASC " , Object[].class);

            List<Object[]> results = query.getResultList();

            for (Object[] result : results) {
                StringBuilder popis1Builder = new StringBuilder();
                // Calculate the number of spaces needed between ID and "pocet poruch"
                int spaces = 15 - ("ID stroja: " + result[0]).length();
                // Append ID stroja with appropriate spacing
                popis1Builder.append("ID stroja: ").append(result[0]);
                // Append calculated number of spaces
                for (int i = 0; i < spaces; i++) {
                    popis1Builder.append(" ");
                }
                // Append pocet poruch
                popis1Builder.append("počet porúch: ").append(result[1]);
                this.stringPopis1.add(popis1Builder.toString());
            }

            transaction.commit();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní údajov: " + e.getMessage() + " Skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
