/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.UdrzbaPoruchy;

import GUI.GUIManager;
import GUI.Login.LoginGUI;
import Tabulky.BPorucha;
import Tabulky.BUdrzbaPoruchy;
import Tabulky.BUdrzbaPoruchyPK;

import javax.persistence.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigInteger;
import java.util.List;

/**
 * @author Mario
 */
public class UdrzbaPoruchyGUI extends javax.swing.JFrame {

    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("default");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    EntityTransaction transaction = entityManager.getTransaction();
    private GUIManager guiManager;
    private LoginGUI loginGUI;

    /**
     * Creates new form UdrzbaPoruchyGUI
     */
    public UdrzbaPoruchyGUI(GUIManager guiManager, LoginGUI loginGUI) {
        initComponents();
        this.guiManager = guiManager;
        this.loginGUI = loginGUI;

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // vynulovanie textovych policok
                vynulovaniePolicok();
                guiManager.zviditelniHlavneMenu();
            }
        });
        this.displayDataInTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonHome = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldPrebratiePoruchy = new javax.swing.JTextField();
        jTextFieldDobaOpravy = new javax.swing.JTextField();
        jTextFieldPopisUdrzby = new javax.swing.JTextField();
        jTextFieldPricinaPoruchy = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jButtonPoziadavkaND = new javax.swing.JButton();
        jCheckBoxZobrazOpravene = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1110, 700));

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("ÚDRŽBA PORUCHY");

        //jButtonHome.setBackground(new java.awt.Color(255, 255, 254));
        //jButtonHome.setText("H");

        // Resize the image
        ImageIcon icon = new ImageIcon("C:\\Users\\Mario\\Desktop\\bakalarka\\hibernate_bakalarka\\H_bakalarka\\icons\\home_button2.png");

        // Resize the image
        Image image = icon.getImage(); // transform it
        Image newImg = image.getScaledInstance(25, 25, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
        icon = new ImageIcon(newImg);  // transform it back
        // Create a Color object with RGB values
        Color backgroundColor = new Color(255, 204, 153);
        // Set the background color of the button
        jButtonHome.setBackground(backgroundColor);
        // Set the icon on the JButton
        jButtonHome.setIcon(icon);
        jButtonHome.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            protected void paintButtonPressed(Graphics g, AbstractButton b) {
                // Do nothing to disable the default button pressed painting
            }
        });

        // Set the focus painted property to false
        jButtonHome.setFocusPainted(false);

        // Remove borders from the button
        jButtonHome.setBorder(null);

        jButtonHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHomeActionPerformed(evt);
            }
        });

        jLabel2.setText("prebratie poruchy*:");

        jLabel3.setText("doba opravy:");

        jLabel4.setText("popis údržby:");

        jLabel5.setText("príčina poruchy:");

        jTextFieldPrebratiePoruchy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTextFieldDobaOpravy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTextFieldPopisUdrzby.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTextFieldPricinaPoruchy.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jButtonUpdate.setBackground(new java.awt.Color(255, 255, 254));
        jButtonUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonPoziadavkaND.setBackground(new java.awt.Color(255, 255, 254));
        jButtonPoziadavkaND.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonPoziadavkaND.setText("POŽIADAVKA ND");
        jButtonPoziadavkaND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPoziadavkaNDActionPerformed(evt);
            }
        });

        jCheckBoxZobrazOpravene.setBackground(new java.awt.Color(255, 204, 153));
        jCheckBoxZobrazOpravene.setFont(new java.awt.Font("Segoe UI", 0, 9)); // NOI18N
        jCheckBoxZobrazOpravene.setText("Zobraz len aktuálne");
        jCheckBoxZobrazOpravene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxZobrazLenAktualneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonHome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addComponent(jLabel1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel5)
                                                                        .addComponent(jLabel4))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jTextFieldPopisUdrzby)
                                                                        .addComponent(jTextFieldPricinaPoruchy, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jTextFieldDobaOpravy, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jTextFieldPrebratiePoruchy, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(15, 15, 15))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jButtonUpdate)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButtonPoziadavkaND)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(jCheckBoxZobrazOpravene, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonHome)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel1)
                                .addGap(46, 46, 46)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jTextFieldPrebratiePoruchy, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jTextFieldDobaOpravy, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(jTextFieldPopisUdrzby, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jTextFieldPricinaPoruchy, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addComponent(jCheckBoxZobrazOpravene)
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonPoziadavkaND, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(272, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "ID poruchy", "os. číslo opravy", "prebratie poruchy", "doba opravy", "popis údržby", "príčina poruchy"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClick_ActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void closeApplication() {
        // cleanup code:
        entityManager.close();
        entityManagerFactory.close();
    }

    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // nacitam ju znova
        this.displayDataInTable();

        // vynulovanie textovych policok
        this.vynulovaniePolicok();
    }

    private void refreshTableActual() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // vynulovanie textovych policok
        this.vynulovaniePolicok();
    }

    private void displayDataInTable() {
        try {
            transaction.begin();

            // Retrieve data from the database using JPQL with a join
            TypedQuery<Object[]> query = entityManager.createQuery(
                    "SELECT u.idPoruchy, u.osCisloOpravy, u.prebratiePoruchy, u.dobaOpravy, u.popisUdrzby, u.pricinaPoruchy " +
                            "FROM BUdrzbaPoruchy u ", Object[].class);

            List<Object[]> results = query.getResultList();

            // Populate data into the table model
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (Object[] result : results) {
                Object[] row = {
                        result[0],  // idPoruchy
                        result[1],  // osCisloOpravy
                        result[2],  // prebratie
                        result[3],  // doobaOpravy
                        result[4],  // popisUdrzby
                        result[5]   // pricinyPoruchy
                };
                model.addRow(row);
            }
            transaction.commit();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní údajov: " + e.getMessage() + " Skúste to znovu!");
            if (transaction.isActive()) {
                transaction.rollback();
            }
        }
    }

    private void vynulovaniePolicok() {
        jTextFieldDobaOpravy.setText("");
        jTextFieldPopisUdrzby.setText("");
        jTextFieldPrebratiePoruchy.setText("");
        jTextFieldPricinaPoruchy.setText("");
        // nastavenie defaultnej hodnoty
        //jCheckBoxZobrazOpravene.setSelected(false);
    }

    private void jTableMouseClick_ActionPerformed(MouseEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        int rowNumber = jTable1.getSelectedRow();

        String prebratiePoruchy = (String) jTable1.getValueAt(rowNumber, 2);
        jTextFieldPrebratiePoruchy.setText(prebratiePoruchy);


        if (jTable1.getValueAt(rowNumber, 3) != null) {
            Double dobaOpravy = (Double) jTable1.getValueAt(rowNumber, 3);
            jTextFieldDobaOpravy.setText(dobaOpravy.toString());
        } else {
            jTextFieldDobaOpravy.setText("");
        }

        if (jTable1.getValueAt(rowNumber, 4) != null) {
            String popisUdrzby = (String) jTable1.getValueAt(rowNumber, 4);
            jTextFieldPopisUdrzby.setText(popisUdrzby);
        } else {
            jTextFieldPopisUdrzby.setText("");
        }

        if (jTable1.getValueAt(rowNumber, 5) != null) {
            String pricinaPoruchy = (String) jTable1.getValueAt(rowNumber, 5);
            jTextFieldPricinaPoruchy.setText(pricinaPoruchy);
        } else {
            jTextFieldPricinaPoruchy.setText("");
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButtonHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeActionPerformed
        // vynulovanie textovych policok
        this.vynulovaniePolicok();

        this.dispose();
        guiManager.zviditelniHlavneMenu();
    }//GEN-LAST:event_jButtonHomeActionPerformed

    private void jCheckBoxZobrazLenAktualneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxZobrazOpraveneActionPerformed
        if (jCheckBoxZobrazOpravene.isSelected()) {
            try {
                transaction.begin();
                refreshTableActual();

                // Retrieve data from the database using JPQL with a join
                TypedQuery<Object[]> query = entityManager.createQuery(
                        "SELECT u.idPoruchy, u.osCisloOpravy, u.prebratiePoruchy, u.dobaOpravy, u.popisUdrzby, u.pricinaPoruchy " +
                                "FROM BUdrzbaPoruchy u " + "WHERE u.dobaOpravy IS NULL", Object[].class);

                List<Object[]> results = query.getResultList();

                // Populate data into the table model
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                for (Object[] result : results) {
                    Object[] row = {
                            result[0],  // idPoruchy
                            result[1],  // osCisloOpravy
                            result[2],  // prebratie
                            result[3],  // doobaOpravy
                            result[4],  // popisUdrzby
                            result[5]   // pricinyPoruchy
                    };
                    model.addRow(row);
                }
                transaction.commit();

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri načítavaní údajov: " + e.getMessage() + " Skúste to znovu!");
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        } else {
            this.refreshTable();
        }
    }//GEN-LAST:event_jCheckBoxZobrazOpraveneActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO treba dalsi stlpec pre ostatnych angazovanych pracovnikov?

        // nacitam si vypisane udaje
        int rowNumber = jTable1.getSelectedRow();
        BigInteger idPoruchy = new BigInteger(String.valueOf(jTable1.getValueAt(rowNumber, 0)));
        BigInteger osCisloOpravy = new BigInteger(String.valueOf(jTable1.getValueAt(rowNumber, 1)));

        if (loginGUI.getRolaZam().equals("I") || loginGUI.getRolaZam().equals("S")) {
            JOptionPane.showMessageDialog(null, "Nemôžete meniť tento záznam!");
            this.vynulovaniePolicok();
            return;
            //System.out.println("tu som");
        }

        String prebratiePoruchy = jTextFieldPrebratiePoruchy.getText();
        // pretipovanie

        String dobaOpravy = jTextFieldDobaOpravy.getText();
        double dobaOpravyDouble = 0;
        if (!dobaOpravy.isEmpty()) {
            dobaOpravyDouble = Double.parseDouble(dobaOpravy);
        }
        String popisUdrzby = jTextFieldPopisUdrzby.getText();
        String pricinaPoruchy = jTextFieldPricinaPoruchy.getText();

        // overenie vypisania udajov
        if (prebratiePoruchy.equals("")) {
            JOptionPane.showMessageDialog(null, "Prosím zadajte všetky povinné políčka!");
        } else {
            try {
                transaction.begin();

                // Načítanie záznamu z databázy na základe ID a uprava
                BUdrzbaPoruchyPK primaryKey = new BUdrzbaPoruchyPK(idPoruchy,osCisloOpravy);
                BUdrzbaPoruchy bUdrzbaPoruchy = entityManager.find(BUdrzbaPoruchy.class,primaryKey);

                bUdrzbaPoruchy.setPricinaPoruchy(pricinaPoruchy);
                bUdrzbaPoruchy.setPrebratiePoruchy(prebratiePoruchy);
                bUdrzbaPoruchy.setPopisUdrzby(popisUdrzby);
                if (!dobaOpravy.isEmpty()) {
                    bUdrzbaPoruchy.setDobaOpravy(dobaOpravyDouble);
                } else {
                    // Assuming dobaOpravy is nullable
                    bUdrzbaPoruchy.setDobaOpravy(null);
                }

                entityManager.persist(bUdrzbaPoruchy);
                transaction.commit();
                JOptionPane.showMessageDialog(null, "Zmena bola vykonana!");

                this.refreshTable();

            } catch (Exception e) {
                e.getCause();
                JOptionPane.showMessageDialog(null, "Nastala chyba pri aktualizácii záznamu: " + e.getMessage() + " skúste to znovu!");
            } finally {
                if (transaction.isActive()) {
                    transaction.rollback();
                }
            }
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonPoziadavkaNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPoziadavkaNDActionPerformed
        // TODO add your handling code here:
        int actualRowNumber = 0;
        actualRowNumber = jTable1.getSelectedRow();
        if (actualRowNumber == 0) {
            JOptionPane.showMessageDialog(null, "Vyberte riadok v tabuľke!");
            this.vynulovaniePolicok();
            return;
        }
        if (loginGUI.getRolaZam().equals("I") || loginGUI.getRolaZam().equals("S")) {
            JOptionPane.showMessageDialog(null, "Nemáte oprávnenie!");
            this.vynulovaniePolicok();
            return;
        }
        this.guiManager.zobrazUdrzbaNahradnyDiel();
    }//GEN-LAST:event_jButtonPoziadavkaNDActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonHome;
    private javax.swing.JButton jButtonPoziadavkaND;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JCheckBox jCheckBoxZobrazOpravene;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldDobaOpravy;
    private javax.swing.JTextField jTextFieldPopisUdrzby;
    private javax.swing.JTextField jTextFieldPrebratiePoruchy;
    private javax.swing.JTextField jTextFieldPricinaPoruchy;
    // End of variables declaration//GEN-END:variables
}
